{"version":3,"sources":["main.min.js","/source/codingWindow.js"],"names":["setUpPage","setUpCodeMirror","setUpRunButton","setUpGoToNextButton","subscribeToURLChanges","courseChanged","newCourse","gotoNextButton","document","querySelector","addEventListener","innerHTML","playButton","addJSCode","findCorrespondingCodeMirrorInstance","id","codeMirrorInstances","find","codeMirrorInstance","jsCode","existingScriptTag","newScriptTag","createElement","remove","text","getValue","body","appendChild","selectorForTextAreas","textAreas","querySelectorAll","map","call","codeMirrorTextArea","window","CodeMirror","fromTextArea","lineNumbers","waitForComponentToLoad","then"],"mappings":"AAAA,cCAA,WAOE,QAASA,KACPC,IACAC,IACAC,IACAC,sBAAsB,eAAgBC,GAGxC,QAASA,GAAcC,IAQvB,QAASH,KACP,GAAII,GAAiBC,SAASC,cAAc,YAC5CF,GAAeG,iBAAiB,QAAS,WACvCF,SAASC,cAAc,WAAWE,WAAa,wCAQnD,QAAST,KACP,GAAMU,GAAaJ,SAASC,cAAc,WAC1CG,GAAWF,iBAAiB,QAAS,WACnCG,MAWJ,QAASC,GAAoCC,GAC3C,MAAOC,GAAoBC,KAAK,SAAAC,GAAA,MAC9BA,GAAmBH,KAAOA,IAAIG,mBAQlC,QAASL,KACP,GAAMM,GAASL,EAAoC,wBAC7CM,EAAoBZ,SAASC,cAAc,gBAC3CY,EAAeb,SAASc,cAAc,SAExCF,IACFA,EAAkBG,SAGpBF,EAAaG,KAAOL,EAAOM,WAC3BjB,SAASkB,KAAKC,YAAYN,GAO5B,QAASpB,KACP,GAAM2B,GAAuB,+BACvBC,EAAYrB,SAASsB,iBAAiBF,EAC5CZ,MAAyBe,IAAIC,KAAKH,EAAW,SAAAI,GAC3C,GAAMf,GAAqBgB,OAAOC,WAAWC,aAC3CH,GAEEI,aAAa,GAIjB,QACEnB,mBAAAA,EACAH,GAAIkB,EAAmBlB,MAtF7B,GAAIC,KA2FJsB,0BAAyBC,KAAKvC","file":"main.min.js","sourcesContent":["'use strict';(function () {\n  var codeMirrorInstances = [];\n\n  /**\n                                 * Boots up the component - gets called after the component\n                                 * is added to the page via html imports\n                                 */\n  function setUpPage() {\n    setUpCodeMirror();\n    setUpRunButton();\n    setUpGoToNextButton();\n    subscribeToURLChanges('#startCoding', courseChanged);\n  }\n\n  function courseChanged(newCourse) {\n\n  } //todo\n\n  /**\n   * When the \"Goto next\" button is clicked, it will record the \n   * student's progress and move them to the next section \n   */\n  function setUpGoToNextButton() {\n    var gotoNextButton = document.querySelector('#gotoNext');\n    gotoNextButton.addEventListener('click', function () {\n      document.querySelector('#topic2').innerHTML += ' <i class=\"material-icons\">done</i>';\n    });\n  }\n\n  /**\n     * There's a play button to run the HTML/CSS/JS code provided by the user\n     * This method attaches a click listener so we can actually execute their code\n     */\n  function setUpRunButton() {\n    var playButton = document.querySelector('#runCode');\n    playButton.addEventListener('click', function () {\n      addJSCode();\n    });\n  }\n\n  /**\n     * We keep an array of code mirror instances for html/css/js\n     * This method returns the instance for a certain type (e.g. js)\n     * @param  {String} id The id of the DOM element for the codemirror instance\n     *                     e.g. javascriptCodeMirror\n     * @return {Object}    The code mirror instance mapped to this ID\n     */\n  function findCorrespondingCodeMirrorInstance(id) {\n    return codeMirrorInstances.find(function (codeMirrorInstance) {return (\n        codeMirrorInstance.id === id);}).codeMirrorInstance;\n  }\n\n  /**\n     * Grabs the JS code from code mirror and then adds it as an inline\n     * script tag to the page so it can be executed. If the script tag\n     * is already there, it deletes the old one.\n     */\n  function addJSCode() {\n    var jsCode = findCorrespondingCodeMirrorInstance('javascriptCodeMirror');\n    var existingScriptTag = document.querySelector('#userAddedJS');\n    var newScriptTag = document.createElement('script');\n\n    if (existingScriptTag) {\n      existingScriptTag.remove();\n    }\n\n    newScriptTag.text = jsCode.getValue();\n    document.body.appendChild(newScriptTag);\n  }\n\n  /**\n     * Replaces the three text areas (html/css/js code) with\n     * code mirror instances\n     */\n  function setUpCodeMirror() {\n    var selectorForTextAreas = '[data-code-mirror-text-area]';\n    var textAreas = document.querySelectorAll(selectorForTextAreas);\n    codeMirrorInstances = [].map.call(textAreas, function (codeMirrorTextArea) {\n      var codeMirrorInstance = window.CodeMirror.fromTextArea(\n      codeMirrorTextArea,\n      {\n        lineNumbers: true });\n\n\n\n      return {\n        codeMirrorInstance: codeMirrorInstance,\n        id: codeMirrorTextArea.id };\n\n    });\n  }\n\n  waitForComponentToLoad().then(setUpPage);\n\n})();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvZGluZ1dpbmRvdy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiYUFBQSxDQUFDLFlBQVc7QUFDVixNQUFJLHNCQUFzQixFQUExQjs7QUFFQTs7OztBQUlBLFdBQVMsU0FBVCxHQUFxQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSwwQkFBc0IsY0FBdEIsRUFBc0MsYUFBdEM7QUFDRDs7QUFFRCxXQUFTLGFBQVQsQ0FBdUIsU0FBdkIsRUFBa0M7O0FBRWpDLEdBRkQsQ0FDRTs7QUFHRjs7OztBQUlBLFdBQVMsbUJBQVQsR0FBK0I7QUFDN0IsUUFBSSxpQkFBaUIsU0FBUyxhQUFULENBQXVCLFdBQXZCLENBQXJCO0FBQ0EsbUJBQWUsZ0JBQWYsQ0FBZ0MsT0FBaEMsRUFBeUMsWUFBWTtBQUNuRCxlQUFTLGFBQVQsQ0FBdUIsU0FBdkIsRUFBa0MsU0FBbEMsSUFBK0MscUNBQS9DO0FBQ0QsS0FGRDtBQUdEOztBQUVEOzs7O0FBSUEsV0FBUyxjQUFULEdBQTBCO0FBQ3hCLFFBQU0sYUFBYSxTQUFTLGFBQVQsQ0FBdUIsVUFBdkIsQ0FBbkI7QUFDQSxlQUFXLGdCQUFYLENBQTRCLE9BQTVCLEVBQXFDLFlBQU07QUFDekM7QUFDRCxLQUZEO0FBR0Q7O0FBRUQ7Ozs7Ozs7QUFPQSxXQUFTLG1DQUFULENBQTZDLEVBQTdDLEVBQWlEO0FBQy9DLFdBQU8sb0JBQW9CLElBQXBCLENBQXlCO0FBQzlCLDJCQUFtQixFQUFuQixLQUEwQixFQURJLEdBQXpCLEVBQ3lCLGtCQURoQztBQUVEOztBQUVEOzs7OztBQUtBLFdBQVMsU0FBVCxHQUFxQjtBQUNuQixRQUFNLFNBQVMsb0NBQW9DLHNCQUFwQyxDQUFmO0FBQ0EsUUFBTSxvQkFBb0IsU0FBUyxhQUFULENBQXVCLGNBQXZCLENBQTFCO0FBQ0EsUUFBTSxlQUFlLFNBQVMsYUFBVCxDQUF1QixRQUF2QixDQUFyQjs7QUFFQSxRQUFJLGlCQUFKLEVBQXVCO0FBQ3JCLHdCQUFrQixNQUFsQjtBQUNEOztBQUVELGlCQUFhLElBQWIsR0FBb0IsT0FBTyxRQUFQLEVBQXBCO0FBQ0EsYUFBUyxJQUFULENBQWMsV0FBZCxDQUEwQixZQUExQjtBQUNEOztBQUVEOzs7O0FBSUEsV0FBUyxlQUFULEdBQTJCO0FBQ3pCLFFBQU0sdUJBQXVCLDhCQUE3QjtBQUNBLFFBQU0sWUFBWSxTQUFTLGdCQUFULENBQTBCLG9CQUExQixDQUFsQjtBQUNBLDBCQUFzQixHQUFHLEdBQUgsQ0FBTyxJQUFQLENBQVksU0FBWixFQUF1Qiw4QkFBc0I7QUFDakUsVUFBTSxxQkFBcUIsT0FBTyxVQUFQLENBQWtCLFlBQWxCO0FBQ3pCLHdCQUR5QjtBQUV6QjtBQUNFLHFCQUFhLElBRGYsRUFGeUIsQ0FBM0I7Ozs7QUFPQSxhQUFPO0FBQ0wsOENBREs7QUFFTCxZQUFJLG1CQUFtQixFQUZsQixFQUFQOztBQUlELEtBWnFCLENBQXRCO0FBYUQ7O0FBRUQsMkJBQXlCLElBQXpCLENBQThCLFNBQTlCOztBQUVELENBOUZEIiwiZmlsZSI6ImNvZGluZ1dpbmRvdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgbGV0IGNvZGVNaXJyb3JJbnN0YW5jZXMgPSBbXTtcblxuICAvKipcbiAgICogQm9vdHMgdXAgdGhlIGNvbXBvbmVudCAtIGdldHMgY2FsbGVkIGFmdGVyIHRoZSBjb21wb25lbnRcbiAgICogaXMgYWRkZWQgdG8gdGhlIHBhZ2UgdmlhIGh0bWwgaW1wb3J0c1xuICAgKi9cbiAgZnVuY3Rpb24gc2V0VXBQYWdlKCkge1xuICAgIHNldFVwQ29kZU1pcnJvcigpO1xuICAgIHNldFVwUnVuQnV0dG9uKCk7XG4gICAgc2V0VXBHb1RvTmV4dEJ1dHRvbigpO1xuICAgIHN1YnNjcmliZVRvVVJMQ2hhbmdlcygnI3N0YXJ0Q29kaW5nJywgY291cnNlQ2hhbmdlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBjb3Vyc2VDaGFuZ2VkKG5ld0NvdXJzZSkge1xuICAgIC8vdG9kb1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gdGhlIFwiR290byBuZXh0XCIgYnV0dG9uIGlzIGNsaWNrZWQsIGl0IHdpbGwgcmVjb3JkIHRoZSBcbiAgICogc3R1ZGVudCdzIHByb2dyZXNzIGFuZCBtb3ZlIHRoZW0gdG8gdGhlIG5leHQgc2VjdGlvbiBcbiAgICovXG4gIGZ1bmN0aW9uIHNldFVwR29Ub05leHRCdXR0b24oKSB7XG4gICAgdmFyIGdvdG9OZXh0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2dvdG9OZXh0Jyk7XG4gICAgZ290b05leHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9waWMyJykuaW5uZXJIVE1MICs9ICcgPGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiPmRvbmU8L2k+JztcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGVyZSdzIGEgcGxheSBidXR0b24gdG8gcnVuIHRoZSBIVE1ML0NTUy9KUyBjb2RlIHByb3ZpZGVkIGJ5IHRoZSB1c2VyXG4gICAqIFRoaXMgbWV0aG9kIGF0dGFjaGVzIGEgY2xpY2sgbGlzdGVuZXIgc28gd2UgY2FuIGFjdHVhbGx5IGV4ZWN1dGUgdGhlaXIgY29kZVxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VXBSdW5CdXR0b24oKSB7XG4gICAgY29uc3QgcGxheUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNydW5Db2RlJyk7XG4gICAgcGxheUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGFkZEpTQ29kZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFdlIGtlZXAgYW4gYXJyYXkgb2YgY29kZSBtaXJyb3IgaW5zdGFuY2VzIGZvciBodG1sL2Nzcy9qc1xuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBpbnN0YW5jZSBmb3IgYSBjZXJ0YWluIHR5cGUgKGUuZy4ganMpXG4gICAqIEBwYXJhbSAge1N0cmluZ30gaWQgVGhlIGlkIG9mIHRoZSBET00gZWxlbWVudCBmb3IgdGhlIGNvZGVtaXJyb3IgaW5zdGFuY2VcbiAgICogICAgICAgICAgICAgICAgICAgICBlLmcuIGphdmFzY3JpcHRDb2RlTWlycm9yXG4gICAqIEByZXR1cm4ge09iamVjdH0gICAgVGhlIGNvZGUgbWlycm9yIGluc3RhbmNlIG1hcHBlZCB0byB0aGlzIElEXG4gICAqL1xuICBmdW5jdGlvbiBmaW5kQ29ycmVzcG9uZGluZ0NvZGVNaXJyb3JJbnN0YW5jZShpZCkge1xuICAgIHJldHVybiBjb2RlTWlycm9ySW5zdGFuY2VzLmZpbmQoY29kZU1pcnJvckluc3RhbmNlID0+XG4gICAgICBjb2RlTWlycm9ySW5zdGFuY2UuaWQgPT09IGlkKS5jb2RlTWlycm9ySW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogR3JhYnMgdGhlIEpTIGNvZGUgZnJvbSBjb2RlIG1pcnJvciBhbmQgdGhlbiBhZGRzIGl0IGFzIGFuIGlubGluZVxuICAgKiBzY3JpcHQgdGFnIHRvIHRoZSBwYWdlIHNvIGl0IGNhbiBiZSBleGVjdXRlZC4gSWYgdGhlIHNjcmlwdCB0YWdcbiAgICogaXMgYWxyZWFkeSB0aGVyZSwgaXQgZGVsZXRlcyB0aGUgb2xkIG9uZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFkZEpTQ29kZSgpIHtcbiAgICBjb25zdCBqc0NvZGUgPSBmaW5kQ29ycmVzcG9uZGluZ0NvZGVNaXJyb3JJbnN0YW5jZSgnamF2YXNjcmlwdENvZGVNaXJyb3InKTtcbiAgICBjb25zdCBleGlzdGluZ1NjcmlwdFRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN1c2VyQWRkZWRKUycpO1xuICAgIGNvbnN0IG5ld1NjcmlwdFRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gICAgaWYgKGV4aXN0aW5nU2NyaXB0VGFnKSB7XG4gICAgICBleGlzdGluZ1NjcmlwdFRhZy5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBuZXdTY3JpcHRUYWcudGV4dCA9IGpzQ29kZS5nZXRWYWx1ZSgpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobmV3U2NyaXB0VGFnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgdGhyZWUgdGV4dCBhcmVhcyAoaHRtbC9jc3MvanMgY29kZSkgd2l0aFxuICAgKiBjb2RlIG1pcnJvciBpbnN0YW5jZXNcbiAgICovXG4gIGZ1bmN0aW9uIHNldFVwQ29kZU1pcnJvcigpIHtcbiAgICBjb25zdCBzZWxlY3RvckZvclRleHRBcmVhcyA9ICdbZGF0YS1jb2RlLW1pcnJvci10ZXh0LWFyZWFdJztcbiAgICBjb25zdCB0ZXh0QXJlYXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yRm9yVGV4dEFyZWFzKTtcbiAgICBjb2RlTWlycm9ySW5zdGFuY2VzID0gW10ubWFwLmNhbGwodGV4dEFyZWFzLCBjb2RlTWlycm9yVGV4dEFyZWEgPT4ge1xuICAgICAgY29uc3QgY29kZU1pcnJvckluc3RhbmNlID0gd2luZG93LkNvZGVNaXJyb3IuZnJvbVRleHRBcmVhKFxuICAgICAgICBjb2RlTWlycm9yVGV4dEFyZWEsXG4gICAgICAgIHtcbiAgICAgICAgICBsaW5lTnVtYmVyczogdHJ1ZVxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb2RlTWlycm9ySW5zdGFuY2UsXG4gICAgICAgIGlkOiBjb2RlTWlycm9yVGV4dEFyZWEuaWRcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICB3YWl0Rm9yQ29tcG9uZW50VG9Mb2FkKCkudGhlbihzZXRVcFBhZ2UpO1xuXG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9\n","(function() {\n  let codeMirrorInstances = [];\n\n  /**\n   * Boots up the component - gets called after the component\n   * is added to the page via html imports\n   */\n  function setUpPage() {\n    setUpCodeMirror();\n    setUpRunButton();\n    setUpGoToNextButton();\n    subscribeToURLChanges('#startCoding', courseChanged);\n  }\n\n  function courseChanged(newCourse) {\n    //todo\n  }\n\n  /**\n   * When the \"Goto next\" button is clicked, it will record the \n   * student's progress and move them to the next section \n   */\n  function setUpGoToNextButton() {\n    var gotoNextButton = document.querySelector('#gotoNext');\n    gotoNextButton.addEventListener('click', function () {\n      document.querySelector('#topic2').innerHTML += ' <i class=\"material-icons\">done</i>';\n    });\n  }\n\n  /**\n   * There's a play button to run the HTML/CSS/JS code provided by the user\n   * This method attaches a click listener so we can actually execute their code\n   */\n  function setUpRunButton() {\n    const playButton = document.querySelector('#runCode');\n    playButton.addEventListener('click', () => {\n      addJSCode();\n    });\n  }\n\n  /**\n   * We keep an array of code mirror instances for html/css/js\n   * This method returns the instance for a certain type (e.g. js)\n   * @param  {String} id The id of the DOM element for the codemirror instance\n   *                     e.g. javascriptCodeMirror\n   * @return {Object}    The code mirror instance mapped to this ID\n   */\n  function findCorrespondingCodeMirrorInstance(id) {\n    return codeMirrorInstances.find(codeMirrorInstance =>\n      codeMirrorInstance.id === id).codeMirrorInstance;\n  }\n\n  /**\n   * Grabs the JS code from code mirror and then adds it as an inline\n   * script tag to the page so it can be executed. If the script tag\n   * is already there, it deletes the old one.\n   */\n  function addJSCode() {\n    const jsCode = findCorrespondingCodeMirrorInstance('javascriptCodeMirror');\n    const existingScriptTag = document.querySelector('#userAddedJS');\n    const newScriptTag = document.createElement('script');\n\n    if (existingScriptTag) {\n      existingScriptTag.remove();\n    }\n\n    newScriptTag.text = jsCode.getValue();\n    document.body.appendChild(newScriptTag);\n  }\n\n  /**\n   * Replaces the three text areas (html/css/js code) with\n   * code mirror instances\n   */\n  function setUpCodeMirror() {\n    const selectorForTextAreas = '[data-code-mirror-text-area]';\n    const textAreas = document.querySelectorAll(selectorForTextAreas);\n    codeMirrorInstances = [].map.call(textAreas, codeMirrorTextArea => {\n      const codeMirrorInstance = window.CodeMirror.fromTextArea(\n        codeMirrorTextArea,\n        {\n          lineNumbers: true\n        }\n      );\n\n      return {\n        codeMirrorInstance,\n        id: codeMirrorTextArea.id\n      };\n    });\n  }\n\n  waitForComponentToLoad().then(setUpPage);\n\n})();\n"],"sourceRoot":"/source/"}